'''
Neuron simulator export for:

Components:
    Leak (Type: ionChannelPassive:  conductance=1.0E-11 (SI conductance))
    k_fast (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    k_slow (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    ca_boyle (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    CaPool (Type: fixedFactorConcentrationModel:  restingConc=0.0 (SI concentration) decayConstant=0.0115943 (SI time) rho=2.38919E-4 (SI rho_factor))
    null (Type: notes)
    null (Type: include)
    elec_syn_1conns (Type: gapJunction:  conductance=1.287E-12 (SI conductance))
    silent (Type: silentSynapse)
    inh_syn_1conns (Type: gradedSynapse:  conductance=4.9593E-11 (SI conductance) delta=0.005 (SI voltage) k=25.0 (SI per_time) Vth=0.0 (SI voltage) erev=-0.07 (SI voltage))
    exc_syn_1conns (Type: gradedSynapse:  conductance=3.3335E-11 (SI conductance) delta=0.005 (SI voltage) k=25.0 (SI per_time) Vth=0.0 (SI voltage) erev=0.0 (SI voltage))
    GenericCell (Type: cell)
    offset_current (Type: pulseGenerator:  delay=0.0 (SI time) duration=2.0 (SI time) amplitude=5.104079999999999E-12 (SI current))
    c302_C1_Syns (Type: network)
    sim_c302_C1_Syns (Type: Simulation:  length=0.5 (SI time) step=1.0E-4 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.4.5
         org.neuroml.model   v1.4.5
         jLEMS               v0.9.8.5

'''

import neuron

import time
h = neuron.h
h.load_file("stdlib.hoc")

h.load_file("stdgui.hoc")

h("objref p")
h("p = new PythonObject()")

class NeuronSimulation():

    def __init__(self, tstop, dt):

        # Adding simulation Component(id=sim_c302_C1_Syns type=Simulation) of network/component: c302_C1_Syns (Type: network)
        print("Population AIZL contains 1 instance(s) of component: GenericCell of type: cell")

        print("Setting the default initial concentrations for ca (used in GenericCell) to 0.0 mM (internal), 2.0 mM (external)")
        h("cai0_ca_ion = 0.0")
        h("cao0_ca_ion = 2.0")

        h.load_file("GenericCell.hoc")
        a_AIZL = []
        h("n_AIZL = 1")
        h("objectvar a_AIZL[n_AIZL]")
        for i in range(int(h.n_AIZL)):
            h("a_AIZL[%i] = new GenericCell()"%i)
            h("access a_AIZL[%i].soma"%i)

        h("a_AIZL[0].position(5.6000004, -258.75, 37.450000000000003)")

        h("proc initialiseV_AIZL() { for i = 0, n_AIZL-1 { a_AIZL[i].set_initial_v() } }")
        h("objref fih_AIZL")
        h('{fih_AIZL = new FInitializeHandler(0, "initialiseV_AIZL()")}')

        h("proc initialiseIons_AIZL() { for i = 0, n_AIZL-1 { a_AIZL[i].set_initial_ion_properties() } }")
        h("objref fih_ion_AIZL")
        h('{fih_ion_AIZL = new FInitializeHandler(1, "initialiseIons_AIZL()")}')

        print("Population ASHL contains 1 instance(s) of component: GenericCell of type: cell")

        print("Setting the default initial concentrations for ca (used in GenericCell) to 0.0 mM (internal), 2.0 mM (external)")
        h("cai0_ca_ion = 0.0")
        h("cao0_ca_ion = 2.0")

        h.load_file("GenericCell.hoc")
        a_ASHL = []
        h("n_ASHL = 1")
        h("objectvar a_ASHL[n_ASHL]")
        for i in range(int(h.n_ASHL)):
            h("a_ASHL[%i] = new GenericCell()"%i)
            h("access a_ASHL[%i].soma"%i)

        h("a_ASHL[0].position(5.55, -265.625, 41.)")

        h("proc initialiseV_ASHL() { for i = 0, n_ASHL-1 { a_ASHL[i].set_initial_v() } }")
        h("objref fih_ASHL")
        h('{fih_ASHL = new FInitializeHandler(0, "initialiseV_ASHL()")}')

        h("proc initialiseIons_ASHL() { for i = 0, n_ASHL-1 { a_ASHL[i].set_initial_ion_properties() } }")
        h("objref fih_ion_ASHL")
        h('{fih_ion_ASHL = new FInitializeHandler(1, "initialiseIons_ASHL()")}')

        print("Population SMDDR contains 1 instance(s) of component: GenericCell of type: cell")

        print("Setting the default initial concentrations for ca (used in GenericCell) to 0.0 mM (internal), 2.0 mM (external)")
        h("cai0_ca_ion = 0.0")
        h("cao0_ca_ion = 2.0")

        h.load_file("GenericCell.hoc")
        a_SMDDR = []
        h("n_SMDDR = 1")
        h("objectvar a_SMDDR[n_SMDDR]")
        for i in range(int(h.n_SMDDR)):
            h("a_SMDDR[%i] = new GenericCell()"%i)
            h("access a_SMDDR[%i].soma"%i)

        h("a_SMDDR[0].position(-7.4500003, -266.25, 34.100000000000001)")

        h("proc initialiseV_SMDDR() { for i = 0, n_SMDDR-1 { a_SMDDR[i].set_initial_v() } }")
        h("objref fih_SMDDR")
        h('{fih_SMDDR = new FInitializeHandler(0, "initialiseV_SMDDR()")}')

        h("proc initialiseIons_SMDDR() { for i = 0, n_SMDDR-1 { a_SMDDR[i].set_initial_ion_properties() } }")
        h("objref fih_ion_SMDDR")
        h('{fih_ion_SMDDR = new FInitializeHandler(1, "initialiseIons_SMDDR()")}')

        print("Population URYDL contains 1 instance(s) of component: GenericCell of type: cell")

        print("Setting the default initial concentrations for ca (used in GenericCell) to 0.0 mM (internal), 2.0 mM (external)")
        h("cai0_ca_ion = 0.0")
        h("cao0_ca_ion = 2.0")

        h.load_file("GenericCell.hoc")
        a_URYDL = []
        h("n_URYDL = 1")
        h("objectvar a_URYDL[n_URYDL]")
        for i in range(int(h.n_URYDL)):
            h("a_URYDL[%i] = new GenericCell()"%i)
            h("access a_URYDL[%i].soma"%i)

        h("a_URYDL[0].position(4.125, -281.425000000000011, 51.899997999999997)")

        h("proc initialiseV_URYDL() { for i = 0, n_URYDL-1 { a_URYDL[i].set_initial_v() } }")
        h("objref fih_URYDL")
        h('{fih_URYDL = new FInitializeHandler(0, "initialiseV_URYDL()")}')

        h("proc initialiseIons_URYDL() { for i = 0, n_URYDL-1 { a_URYDL[i].set_initial_ion_properties() } }")
        h("objref fih_ion_URYDL")
        h('{fih_ion_URYDL = new FInitializeHandler(1, "initialiseIons_URYDL()")}')

        print("Population VB11 contains 1 instance(s) of component: GenericCell of type: cell")

        print("Setting the default initial concentrations for ca (used in GenericCell) to 0.0 mM (internal), 2.0 mM (external)")
        h("cai0_ca_ion = 0.0")
        h("cao0_ca_ion = 2.0")

        h.load_file("GenericCell.hoc")
        a_VB11 = []
        h("n_VB11 = 1")
        h("objectvar a_VB11[n_VB11]")
        for i in range(int(h.n_VB11)):
            h("a_VB11[%i] = new GenericCell()"%i)
            h("access a_VB11[%i].soma"%i)

        h("a_VB11[0].position(-1.8249999, 262.324999999999989, -21.949999999999999)")

        h("proc initialiseV_VB11() { for i = 0, n_VB11-1 { a_VB11[i].set_initial_v() } }")
        h("objref fih_VB11")
        h('{fih_VB11 = new FInitializeHandler(0, "initialiseV_VB11()")}')

        h("proc initialiseIons_VB11() { for i = 0, n_VB11-1 { a_VB11[i].set_initial_ion_properties() } }")
        h("objref fih_ion_VB11")
        h('{fih_ion_VB11 = new FInitializeHandler(1, "initialiseIons_VB11()")}')

        print("Population VD12 contains 1 instance(s) of component: GenericCell of type: cell")

        print("Setting the default initial concentrations for ca (used in GenericCell) to 0.0 mM (internal), 2.0 mM (external)")
        h("cai0_ca_ion = 0.0")
        h("cao0_ca_ion = 2.0")

        h.load_file("GenericCell.hoc")
        a_VD12 = []
        h("n_VD12 = 1")
        h("objectvar a_VD12[n_VD12]")
        for i in range(int(h.n_VD12)):
            h("a_VD12[%i] = new GenericCell()"%i)
            h("access a_VD12[%i].soma"%i)

        h("a_VD12[0].position(-0.75, 345.5, -23.149999999999999)")

        h("proc initialiseV_VD12() { for i = 0, n_VD12-1 { a_VD12[i].set_initial_v() } }")
        h("objref fih_VD12")
        h('{fih_VD12 = new FInitializeHandler(0, "initialiseV_VD12()")}')

        h("proc initialiseIons_VD12() { for i = 0, n_VD12-1 { a_VD12[i].set_initial_ion_properties() } }")
        h("objref fih_ion_VD12")
        h('{fih_ion_VD12 = new FInitializeHandler(1, "initialiseIons_VD12()")}')

        '''
        Adding projection: NC_AIZL_ASHL_Generic_GJ
        From AIZL to ASHL, with 1 connection(s)
        '''
        h("objectvar syn_NC_AIZL_ASHL_Generic_GJ_elec_syn_1conns_A[1]")

        h("objectvar syn_NC_AIZL_ASHL_Generic_GJ_elec_syn_1conns_B[1]")

        h("a_AIZL[0].soma { syn_NC_AIZL_ASHL_Generic_GJ_elec_syn_1conns_A[0] = new elec_syn_1conns(0.500000) }")
        h("a_ASHL[0].soma { syn_NC_AIZL_ASHL_Generic_GJ_elec_syn_1conns_B[0] = new elec_syn_1conns(0.500000) }")
        h("setpointer syn_NC_AIZL_ASHL_Generic_GJ_elec_syn_1conns_A[0].vpeer, a_ASHL[0].soma.v(0.500000)")
        h("setpointer syn_NC_AIZL_ASHL_Generic_GJ_elec_syn_1conns_B[0].vpeer, a_AIZL[0].soma.v(0.500000)")
        '''
        Adding projection: NC_ASHL_AIZL_Generic_GJ
        From ASHL to AIZL, with 1 connection(s)
        '''
        h("objectvar syn_NC_ASHL_AIZL_Generic_GJ_elec_syn_1conns_A[1]")

        h("objectvar syn_NC_ASHL_AIZL_Generic_GJ_elec_syn_1conns_B[1]")

        h("a_ASHL[0].soma { syn_NC_ASHL_AIZL_Generic_GJ_elec_syn_1conns_A[0] = new elec_syn_1conns(0.500000) }")
        h("a_AIZL[0].soma { syn_NC_ASHL_AIZL_Generic_GJ_elec_syn_1conns_B[0] = new elec_syn_1conns(0.500000) }")
        h("setpointer syn_NC_ASHL_AIZL_Generic_GJ_elec_syn_1conns_A[0].vpeer, a_AIZL[0].soma.v(0.500000)")
        h("setpointer syn_NC_ASHL_AIZL_Generic_GJ_elec_syn_1conns_B[0].vpeer, a_ASHL[0].soma.v(0.500000)")
        '''
        Adding projection: NC_VD12_VB11_GABA
        From VD12 to VB11 1 connection(s)
        '''
        h("objectvar syn_NC_VD12_VB11_GABA_silent_pre[1]")

        h("objectvar syn_NC_VD12_VB11_GABA_inh_syn_1conns_post[1]")

        h("a_VD12[0].soma { syn_NC_VD12_VB11_GABA_silent_pre[0] = new silent(0.500000) }")
        h("a_VB11[0].soma { syn_NC_VD12_VB11_GABA_inh_syn_1conns_post[0] = new inh_syn_1conns(0.500000) }")
        h("setpointer syn_NC_VD12_VB11_GABA_silent_pre[0].vpeer, a_VB11[0].soma.v(0.500000)")
        h("setpointer syn_NC_VD12_VB11_GABA_inh_syn_1conns_post[0].vpeer, a_VD12[0].soma.v(0.500000)")
        '''
        Adding projection: NC_URYDL_SMDDR_Glutamate
        From URYDL to SMDDR 1 connection(s)
        '''
        h("objectvar syn_NC_URYDL_SMDDR_Glutamate_silent_pre[1]")

        h("objectvar syn_NC_URYDL_SMDDR_Glutamate_exc_syn_1conns_post[1]")

        h("a_URYDL[0].soma { syn_NC_URYDL_SMDDR_Glutamate_silent_pre[0] = new silent(0.500000) }")
        h("a_SMDDR[0].soma { syn_NC_URYDL_SMDDR_Glutamate_exc_syn_1conns_post[0] = new exc_syn_1conns(0.500000) }")
        h("setpointer syn_NC_URYDL_SMDDR_Glutamate_silent_pre[0].vpeer, a_SMDDR[0].soma.v(0.500000)")
        h("setpointer syn_NC_URYDL_SMDDR_Glutamate_exc_syn_1conns_post[0].vpeer, a_URYDL[0].soma.v(0.500000)")
        # Adding input: Component(id=0 type=input)

        h("objref Input_AIZL_offset_current_0")
        h("a_AIZL[0].soma { Input_AIZL_offset_current_0 = new offset_current(0.500000) } ")

        # Adding input: Component(id=0 type=input)

        h("objref Input_URYDL_offset_current_0")
        h("a_URYDL[0].soma { Input_URYDL_offset_current_0 = new offset_current(0.500000) } ")

        # Adding input: Component(id=0 type=input)

        h("objref Input_VD12_offset_current_0")
        h("a_VD12[0].soma { Input_VD12_offset_current_0 = new offset_current(0.500000) } ")

        trec = h.Vector()
        trec.record(h._ref_t)

        h.tstop = tstop

        h.dt = dt

        h.steps_per_ms = 1/h.dt



        # File to save: neurons_v
        # Column: AIZL/0/GenericCell/v
        h(' objectvar v_AIZL_v_neurons_v ')
        h(' { v_AIZL_v_neurons_v = new Vector() } ')
        h(' v_AIZL_v_neurons_v.record(&a_AIZL[0].soma.v(0.5)) ')
        h.v_AIZL_v_neurons_v.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: ASHL/0/GenericCell/v
        h(' objectvar v_ASHL_v_neurons_v ')
        h(' { v_ASHL_v_neurons_v = new Vector() } ')
        h(' v_ASHL_v_neurons_v.record(&a_ASHL[0].soma.v(0.5)) ')
        h.v_ASHL_v_neurons_v.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: SMDDR/0/GenericCell/v
        h(' objectvar v_SMDDR_v_neurons_v ')
        h(' { v_SMDDR_v_neurons_v = new Vector() } ')
        h(' v_SMDDR_v_neurons_v.record(&a_SMDDR[0].soma.v(0.5)) ')
        h.v_SMDDR_v_neurons_v.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: URYDL/0/GenericCell/v
        h(' objectvar v_URYDL_v_neurons_v ')
        h(' { v_URYDL_v_neurons_v = new Vector() } ')
        h(' v_URYDL_v_neurons_v.record(&a_URYDL[0].soma.v(0.5)) ')
        h.v_URYDL_v_neurons_v.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: VB11/0/GenericCell/v
        h(' objectvar v_VB11_v_neurons_v ')
        h(' { v_VB11_v_neurons_v = new Vector() } ')
        h(' v_VB11_v_neurons_v.record(&a_VB11[0].soma.v(0.5)) ')
        h.v_VB11_v_neurons_v.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: VD12/0/GenericCell/v
        h(' objectvar v_VD12_v_neurons_v ')
        h(' { v_VD12_v_neurons_v = new Vector() } ')
        h(' v_VD12_v_neurons_v.record(&a_VD12[0].soma.v(0.5)) ')
        h.v_VD12_v_neurons_v.resize((h.tstop * h.steps_per_ms) + 1)

        # File to save: time
        # Column: time
        h(' objectvar v_time ')
        h(' { v_time = new Vector() } ')
        h(' v_time.record(&t) ')
        h.v_time.resize((h.tstop * h.steps_per_ms) + 1)

        # File to save: neurons_activity
        # Column: AIZL/0/GenericCell/caConc
        h(' objectvar v_AIZL_v_neurons_activity ')
        h(' { v_AIZL_v_neurons_activity = new Vector() } ')
        h(' v_AIZL_v_neurons_activity.record(&a_AIZL[0].soma.cai(0.5)) ')
        h.v_AIZL_v_neurons_activity.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: ASHL/0/GenericCell/caConc
        h(' objectvar v_ASHL_v_neurons_activity ')
        h(' { v_ASHL_v_neurons_activity = new Vector() } ')
        h(' v_ASHL_v_neurons_activity.record(&a_ASHL[0].soma.cai(0.5)) ')
        h.v_ASHL_v_neurons_activity.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: SMDDR/0/GenericCell/caConc
        h(' objectvar v_SMDDR_v_neurons_activity ')
        h(' { v_SMDDR_v_neurons_activity = new Vector() } ')
        h(' v_SMDDR_v_neurons_activity.record(&a_SMDDR[0].soma.cai(0.5)) ')
        h.v_SMDDR_v_neurons_activity.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: URYDL/0/GenericCell/caConc
        h(' objectvar v_URYDL_v_neurons_activity ')
        h(' { v_URYDL_v_neurons_activity = new Vector() } ')
        h(' v_URYDL_v_neurons_activity.record(&a_URYDL[0].soma.cai(0.5)) ')
        h.v_URYDL_v_neurons_activity.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: VB11/0/GenericCell/caConc
        h(' objectvar v_VB11_v_neurons_activity ')
        h(' { v_VB11_v_neurons_activity = new Vector() } ')
        h(' v_VB11_v_neurons_activity.record(&a_VB11[0].soma.cai(0.5)) ')
        h.v_VB11_v_neurons_activity.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: VD12/0/GenericCell/caConc
        h(' objectvar v_VD12_v_neurons_activity ')
        h(' { v_VD12_v_neurons_activity = new Vector() } ')
        h(' v_VD12_v_neurons_activity.record(&a_VD12[0].soma.cai(0.5)) ')
        h.v_VD12_v_neurons_activity.resize((h.tstop * h.steps_per_ms) + 1)



    def run(self):

        sim_start = time.time()
        print("Running a simulation of %sms (dt = %sms)" % (h.tstop, h.dt))

        h.run()

        sim_end = time.time()
        sim_time = sim_end - sim_start
        print("Finished simulation in %f seconds (%f mins), saving results..."%(sim_time, sim_time/60.0))


        # File to save: time
        py_v_time = [ t/1000 for t in h.v_time.to_python() ]  # Convert to Python list for speed...

        f_time_f2 = open('time.dat', 'w')
        for i in range(int(h.tstop * h.steps_per_ms) + 1):
            f_time_f2.write('%f'% py_v_time[i])  # Save in SI units...+ '\n')
        f_time_f2.close()
        print("Saved data to: time.dat")

        # File to save: neurons_v
        py_v_AIZL_v_neurons_v = [ float(x  / 1000.0) for x in h.v_AIZL_v_neurons_v.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_ASHL_v_neurons_v = [ float(x  / 1000.0) for x in h.v_ASHL_v_neurons_v.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_SMDDR_v_neurons_v = [ float(x  / 1000.0) for x in h.v_SMDDR_v_neurons_v.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_URYDL_v_neurons_v = [ float(x  / 1000.0) for x in h.v_URYDL_v_neurons_v.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_VB11_v_neurons_v = [ float(x  / 1000.0) for x in h.v_VB11_v_neurons_v.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_VD12_v_neurons_v = [ float(x  / 1000.0) for x in h.v_VD12_v_neurons_v.to_python() ]  # Convert to Python list for speed, variable has dim: voltage

        f_neurons_v_f2 = open('c302_C1_Syns.dat', 'w')
        for i in range(int(h.tstop * h.steps_per_ms) + 1):
            f_neurons_v_f2.write('%e\t'% py_v_time[i]  + '%e\t'%(py_v_AIZL_v_neurons_v[i])  + '%e\t'%(py_v_ASHL_v_neurons_v[i])  + '%e\t'%(py_v_SMDDR_v_neurons_v[i])  + '%e\t'%(py_v_URYDL_v_neurons_v[i])  + '%e\t'%(py_v_VB11_v_neurons_v[i])  + '%e\t'%(py_v_VD12_v_neurons_v[i]) + '\n')
        f_neurons_v_f2.close()
        print("Saved data to: c302_C1_Syns.dat")

        # File to save: neurons_activity
        py_v_AIZL_v_neurons_activity = [ float(x ) for x in h.v_AIZL_v_neurons_activity.to_python() ]  # Convert to Python list for speed, variable has dim: concentration
        py_v_ASHL_v_neurons_activity = [ float(x ) for x in h.v_ASHL_v_neurons_activity.to_python() ]  # Convert to Python list for speed, variable has dim: concentration
        py_v_SMDDR_v_neurons_activity = [ float(x ) for x in h.v_SMDDR_v_neurons_activity.to_python() ]  # Convert to Python list for speed, variable has dim: concentration
        py_v_URYDL_v_neurons_activity = [ float(x ) for x in h.v_URYDL_v_neurons_activity.to_python() ]  # Convert to Python list for speed, variable has dim: concentration
        py_v_VB11_v_neurons_activity = [ float(x ) for x in h.v_VB11_v_neurons_activity.to_python() ]  # Convert to Python list for speed, variable has dim: concentration
        py_v_VD12_v_neurons_activity = [ float(x ) for x in h.v_VD12_v_neurons_activity.to_python() ]  # Convert to Python list for speed, variable has dim: concentration

        f_neurons_activity_f2 = open('c302_C1_Syns.activity.dat', 'w')
        for i in range(int(h.tstop * h.steps_per_ms) + 1):
            f_neurons_activity_f2.write('%e\t'% py_v_time[i]  + '%e\t'%(py_v_AIZL_v_neurons_activity[i])  + '%e\t'%(py_v_ASHL_v_neurons_activity[i])  + '%e\t'%(py_v_SMDDR_v_neurons_activity[i])  + '%e\t'%(py_v_URYDL_v_neurons_activity[i])  + '%e\t'%(py_v_VB11_v_neurons_activity[i])  + '%e\t'%(py_v_VD12_v_neurons_activity[i]) + '\n')
        f_neurons_activity_f2.close()
        print("Saved data to: c302_C1_Syns.activity.dat")

        save_end = time.time()
        save_time = save_end - sim_end
        print("Finished saving results in %f seconds"%(save_time))

        print("Done")

        quit()
if __name__ == '__main__':

    ns = NeuronSimulation(tstop=500, dt=0.1)

    ns.run()

